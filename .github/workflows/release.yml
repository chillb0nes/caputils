name: release

on:
  release:
    types:
      - published

jobs:
  pypi:
    name: upload release to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: deps
        run: python -m pip install build twine

      - name: build
        run: python -m build

      - name: twine check
        run: |
          python -m twine check --strict dist/*

      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl --show-error --fail -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq '.value' <<< "${resp}")
          
          # exchange the OIDC token for an API token
          resp=$(curl --show-error --fail -X POST https://pypi.org/_/oidc/github/mint-token \
            -d "{\"token\": ${oidc_token}}")
          api_token=$(jq '.token' <<< "${resp}")
          
          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"
          
          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      - name: publish release
        run: |
          python -m twine upload -u __token__ -p "${{ steps.mint-token.outputs.api-token }}" dist/*